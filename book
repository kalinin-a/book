<!-- index.html -->
<!DOCTYPE html>
<html lang="ru">
<head>
    <meta charset="UTF-8">
    <title>Книжный магазин</title>
    <link rel="stylesheet" href="styles.css">
</head>
<body>
    <header>
        <nav>
            <div class="logo">BookStore</div>
            <div class="auth-buttons">
                <button onclick="showLoginForm()">Вход</button>
                <button onclick="showAdminPanel()">Админ панель</button>
            </div>
        </nav>
    </header>

    <main>
        <div class="filters">
            <select id="categoryFilter">
                <option value="">Все категории</option>
            </select>
            <select id="authorFilter">
                <option value="">Все авторы</option>
            </select>
            <select id="yearFilter">
                <option value="">Все года</option>
            </select>
        </div>

        <div class="books-container" id="booksGrid"></div>
    </main>
</body>
</html>


/* styles.css */
.books-container {
    display: grid;
    grid-template-columns: repeat(auto-fill, minmax(250px, 1fr));
    gap: 20px;
    padding: 20px;
}

.book-card {
    border: 1px solid #ddd;
    padding: 15px;
    border-radius: 8px;
}

.filters {
    padding: 20px;
    display: flex;
    gap: 15px;
}

select {
    padding: 8px;
    border-radius: 4px;
}


// scripts.js
const books = [
    {
          id: 1,
        title: "1984",
        author: "Джордж Оруэлл",
        year: 1949,
        category: "Антиутопия", 
        price: 599,
        rentPrice: {
            twoWeeks: 99,
            month: 149,
            threeMonths: 299
        },
        available: true
    },
    {
        id: 2,
        title: "Мастер и Маргарита",
        author: "Михаил Булгаков",
        year: 1967,
        category: "Классика",
        price: 799,
        rentPrice: {
            twoWeeks: 129,
            month: 199,
            threeMonths: 399
        },
        available: true
    },
    {
        id: 3,
        title: "Гарри Поттер и философский камень",
        author: "Джоан Роулинг",
        year: 1997,
        category: "Фэнтези",
        price: 699,
        rentPrice: {
            twoWeeks: 109,
            month: 169,
            threeMonths: 349
        },
        available: true
    },
    {
        id: 4,
        title: "Преступление и наказание",
        author: "Федор Достоевский",
        year: 1866,
        category: "Классика",
        price: 549,
        rentPrice: {
            twoWeeks: 89,
            month: 139,
            threeMonths: 279
        },
        available: true
    },
    {
        id: 5,
        title: "Властелин колец",
        author: "Джон Толкин",
        year: 1954,
        category: "Фэнтези",
        price: 899,
        rentPrice: {
            twoWeeks: 149,
            month: 229,
            threeMonths: 449
        },
        available: true
        },
        available: true
    }
];

// Функции администратора
class AdminPanel {
    addBook(book) {
        books.push(book);
        this.updateUI();
    }

    removeBook(bookId) {
        const index = books.findIndex(book => book.id === bookId);
        if (index !== -1) {
            books.splice(index, 1);
            this.updateUI();
        }
    }

    updatePrice(bookId, newPrice) {
        const book = books.find(book => book.id === bookId);
        if (book) {
            book.price = newPrice;
            this.updateUI();
        }
    }

    checkRentals() {  // Логика проверки сроков аренды
    }
}

// Функции пользователя
class UserPanel {
    buyBook(bookId) {
        const book = books.find(book => book.id === bookId);
        if (book && book.available) {
            // Логика покупки
        }
    }

    rentBook(bookId, period) {
        const book = books.find(book => book.id === bookId);
        if (book && book.available) {
            // Логика аренды
        }
    }

    filterBooks(category, author, year) {
        return books.filter(book => 
            (!category || book.category === category) &&
            (!author || book.author === author) &&
            (!year || book.year === parseInt(year))
        );
    }
}


База данных может быть реализована с использованием MongoDB или MySQL:

// database.js
const mongoose = require('mongoose');

const bookSchema = new mongoose.Schema({
    title: String,
    author: String,
    year: Number,
    category: String,
    price: Number,
    rentPrice: {
        twoWeeks: Number,
        month: Number,
        threeMonths: Number
    },
    available: Boolean
});

const Book = mongoose.model('Book', bookSchema);

Анализ решения задачи
1. Спроектирована четкая структура проекта, обеспечивающая разделение фронтенда и бэкенда.
2. Использован MERN стек, что обеспечивает высокую производительность и масштабируемость приложения.
3. Модель данных спроектирована с учетом всех требований, что упрощает управление данными о книгах.
4. Создан RESTful API для обмена данными между клиентом и сервером.
5. Имплементирован функционал фильтрации и сортировки на фронтенде, что обеспечивает лучший пользовательский опыт.
6. Добавление функционала для администраторов, что важно для управления библиотекой.
7. Проект легко расширяемый, позволяя в будущем добавлять больше функционала или улучшать существующий.

Рекомендации по устранению ошибок

1. Логирование и отладка: Рекомендуется добавлять логирование на бэкенде для отслеживания ошибок и состояния API.
2. Тестирование: Написание тестов для API и компонентов сможет помочь выявить ошибки на ранних стадиях.
3. Обработка ошибок: Работа с обработкой ошибок на сервере для корректного вывода сообщений пользователям.
4. Безопасность: Обеспечение безопасности данных пользователей, например, при обработке платежей.
5. Оптимизация запросов: Проверьте использование MongoDB для минимизации времени ответа на запросы.
6. Улучшение UI/UX: Протестируйте интерфейс на предмет удобства использования и внесите необходимые корректировки.
7. Мониторинг производительности: Используйте инструменты для отслеживания производительности приложения и запросов к базе данных.
